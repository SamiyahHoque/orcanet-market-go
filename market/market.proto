syntax = "proto3";

import "google/protobuf/empty.proto";

option go_package = "orcanet/market";

package market;

message PeerInfo {
  string peerId = 1;
  repeated string addrs = 2; // Multiaddresses as strings
}

service Market {
  // Register a file on the market associated with a peer.
  rpc RegisterFile (RegisterFileRequest) returns (google.protobuf.Empty) {}

  // Check for holders of a file, returns a list of peers holding the file.
  rpc CheckHolders (CheckHoldersRequest) returns (HoldersResponse) {}
}

message CheckHoldersRequest {
  string fileHash = 1;
}

// Adjusted to remove the User message and focus on the peer's info directly.
message RegisterFileRequest {
  string fileHash = 1;
  PeerInfo peerInfo = 2; // Optionally include this if you need to register specific peer info at the same time
}

message HoldersResponse {
  repeated PeerInfo holders = 1; // List of peers holding the file
}